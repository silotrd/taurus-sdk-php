<?php

/**
 * *************************************************************************
 *
 * Copyright (c) 2021. All Rights Reserved
 *
 * ************************************************************************
 *
 * User: muchao
 */

namespace Silot;

require_once "config/TaurusConfig.php";
require_once "utils/TaurusHttpUtil.php";

class TaurusClient {
    public function __construct($apiKey, $serverUrl) {
        TaurusConfig::init($apiKey, $serverUrl);
    }

    /**
     * Create Disbursement
     *
     * @param $externalId                   string ID of the disbursement in your system, used to reconcile
     *                                      disbursements after they have been completed.
     * @param $amount                       float Amount to disburse
     * @param $bankCode                     string Code of the destination bank
     * @param $accountHolderName            string Name of account holder as per the bank's or e-wallet's records. Used
     *                                      for verification and error/customer support scenarios.
     * @param $accountNumber                string Destination bank account number. If disbursing to an e-wallet, phone
     *                                      number registered with the e-wallet account.
     * @param $description                  string Description to send with the disbursement
     *
     * @return Current disbursement vo
     * @throws IOException May be caused by an HTTP request
     */
    public function createDisbursement($externalId, $amount, $bankCode, $accountHolderName, $accountNumber, $description) {
        $url                           = sprintf("%s%s", TaurusConfig::$serverUrl, "/api/v1/disbursement");
        $paramMap["externalId"]        = $externalId;
        $paramMap["amount"]            = $amount;
        $paramMap["bankCode"]          = $bankCode;
        $paramMap["accountHolderName"] = $accountHolderName;
        $paramMap["accountNumber"]     = $accountNumber;
        $paramMap["description"]       = $description;
        return TaurusHttpUtil::post($url, $paramMap);
    }

    /**
     * Get Disbursement By ID
     *
     * @param $disbursementId integer An disbursement ID generated by Taurus
     *
     * @return array disbursement vo
     * @throws IOException May be caused by an HTTP request
     */
    public function getDisbursementById($disbursementId) {
        $url = sprintf("%s%s?disbursementId=%s",
            TaurusConfig::$serverUrl,
            "/api/v1/disbursement",
            $disbursementId);
        return TaurusHttpUtil::get($url);
    }

    /**
     * List Disbursements
     * This endpoint queries the current status of all disbursements with sepcific conditions.
     *
     * @param $limit              (optional) default 10
     * @param $lastDisbursementId (optional) A cursor for use in pagination.
     * @param $status             (optional) disbursement status. Enum: "PENDING" "COMPLETED" "FAILED"
     *
     * @return array disbursement vo list
     * @throws IOException May be caused by an HTTP request
     */
    public function listDisbursement($limit = null,
                                     $lastDisbursementId = null,
                                     $status = null) {
        $url = sprintf("%s%s?limit=%s&lastDisbursementId=%s&status=%s",
            TaurusConfig::$serverUrl,
            "/api/v1/disbursement/list",
            $limit == null ? "" : $limit,
            $lastDisbursementId == null ? "" : $lastDisbursementId,
            $status == null ? "" : $status);
        return TaurusHttpUtil::get($url);
    }

    /**
     * Create Invoice
     *
     * @param $externalId                 string ID of your choice (typically the unique identifier of an invoice in
     *                                    your system)
     * @param $amount                     float Amount on the invoice. The minimum amount to create an invoice is 1 IDR
     * @param $description                string Description of the invoice
     * @param $invoiceDuration            integer Duration of time that the end customer is given to pay the invoice
     *                                    before expiration
     *                                    (in seconds, since creation). Default is 24 hours (86,400 seconds).
     * @param $successRedirectUrl         string URL that the end customer will be redirected to upon successful
     *                                    invoice
     *                                    payment.
     *
     * @return Current invoice vo
     * @throws IOException May be caused by an HTTP request
     */
    public function createInvoice($externalId,
                                  $amount,
                                  $description,
                                  $invoiceDuration,
                                  $successRedirectUrl) {
        $url                            = sprintf("%s%s",
            TaurusConfig::$serverUrl,
            "/api/v1/invoice");
        $paramMap["externalId"]         = $externalId;
        $paramMap["amount"]             = $amount;
        $paramMap["description"]        = $description;
        $paramMap["invoiceDuration"]    = $invoiceDuration;
        $paramMap["successRedirectUrl"] = $successRedirectUrl;
        return TaurusHttpUtil::post($url, $paramMap);
    }

    /**
     * Get invoice detail
     *
     * @param $invoiceId float An invoice ID generated by Taurus
     *
     * @return array invoice vo
     * @throws IOException May be caused by an HTTP request
     */
    public function getInvoiceById($invoiceId) {
        $url = sprintf("%s%s?invoiceId=%s",
            TaurusConfig::$serverUrl,
            "/api/v1/invoice",
            $invoiceId);
        return TaurusHttpUtil::get($url);
    }

    /**
     * List All Invoices
     * You can list all invoices, or list the invoices for a specific updated time.
     * The invoices are returned sorted by created date, with the most recently created invoices appearing first.
     *
     * @param $limit         (optional) default 10
     * @param $lastInvoiceId (optional) A cursor for use in pagination.
     * @param $status        (optional) Invoice status. Enum: "UNPAID" "PAID" "EXPIRED" "SETTLED"
     *
     * @return invoice vo list
     * @throws IOException May be caused by an HTTP request
     */
    public function listInvoice($limit = null,
                                $lastInvoiceId = null,
                                $status = null) {
        $url = sprintf("%s%s?limit=%s&lastInvoiceId=%s&status=%s",
            TaurusConfig::$serverUrl,
            "/api/v1/invoice/list",
            $limit == null ? "" : $limit,
            $lastInvoiceId == null ? "" : $lastInvoiceId,
            $status == null ? "" : $status);
        return TaurusHttpUtil::get($url);
    }

    /**
     * You can cancel an already created invoice by expiring it immediately using this endpoint.
     *
     * @param $invoiceId float An invoice ID generated by Taurus
     *
     * @return array Common response
     * @throws IOException May be caused by an HTTP request
     */
    public function expire($invoiceId) {
        $url                   = sprintf("%s%s",
            TaurusConfig::$serverUrl,
            "/api/v1/invoice/expire");
        $paramMap["invoiceId"] = $invoiceId;
        return TaurusHttpUtil::post($url, $paramMap);
    }
}